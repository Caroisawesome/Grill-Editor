// Generated by CoffeeScript 1.6.3
(function() {
  var u;

  u = ABM.util;

  ABM.DataSet = (function() {
    DataSet.patchDataSet = function(name) {
      var p, ps;
      ps = ABM.patches;
      return new DataSet(ps.numX, ps.numY, (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = ps.length; _i < _len; _i++) {
          p = ps[_i];
          _results.push(p[name]);
        }
        return _results;
      })());
    };

    DataSet.importImageDataSet = function(name, gray, alpha, f) {
      var ds,
        _this = this;
      if (gray == null) {
        gray = false;
      }
      if (alpha == null) {
        alpha = false;
      }
      ds = new DataSet();
      u.importImage(name, function(img) {
        _this.imageDataSet(img, gray, alpha, ds);
        if (f != null) {
          return f(ds);
        }
      });
      return ds;
    };

    DataSet.imageDataSet = function(img, gray, alpha, ds) {
      var ctx, i, id, jsdata, ta, _i, _ref;
      if (gray == null) {
        gray = false;
      }
      if (alpha == null) {
        alpha = false;
      }
      if (ds == null) {
        ds = new DataSet();
      }
      ctx = u.imageToCtx(img);
      id = u.ctxToImageData(ctx);
      ta = id.data;
      jsdata = [];
      for (i = _i = 0, _ref = ta.length; _i < _ref; i = _i += 4) {
        if (gray) {
          jsdata.push(ta[i]);
        } else {
          if (alpha) {
            jsdata.push(ta[i] << 24 | ta[i + 1] << 16 | ta[i + 2] << 8 | ta[i + 3]);
          } else {
            jsdata.push(ta[i] << 16 | ta[i + 1] << 8 | ta[i + 2]);
          }
        }
      }
      return ds.reset(ctx.canvas.width, ctx.canvas.height, jsdata);
    };

    DataSet.importAscDataSet = function(name, f) {
      var ds,
        _this = this;
      ds = new DataSet();
      u.xhrLoadFile(name, "text", function(response) {
        _this.ascDataSet(response, ds);
        if (f != null) {
          return f(ds);
        }
      });
      return ds;
    };

    DataSet.ascDataSet = function(str, ds) {
      var gisData, i, keyVal, nums, textData, _i, _j, _k, _ref, _ref1;
      if (ds == null) {
        ds = new DataSet();
      }
      textData = str.split("\n");
      gisData = {};
      gisData.data = [];
      for (i = _i = 0; _i <= 5; i = ++_i) {
        keyVal = textData[i].split(/\s+/);
        gisData[keyVal[0].toLowerCase()] = parseFloat(keyVal[1]);
      }
      for (i = _j = 0, _ref = gisData.nrows; _j < _ref; i = _j += 1) {
        nums = textData[6 + i].trim().split(" ");
        for (i = _k = 0, _ref1 = nums.length; 0 <= _ref1 ? _k < _ref1 : _k > _ref1; i = 0 <= _ref1 ? ++_k : --_k) {
          nums[i] = parseFloat(nums[i]);
        }
        gisData.data = gisData.data.concat(nums);
      }
      return ds.reset(gisData.ncols, gisData.nrows, gisData.data);
    };

    function DataSet(width, height, data) {
      if (width == null) {
        width = 0;
      }
      if (height == null) {
        height = 0;
      }
      if (data == null) {
        data = [];
      }
      this.reset(width, height, data);
    }

    DataSet.prototype.reset = function(width, height, data) {
      this.width = width;
      this.height = height;
      this.data = data;
      if (data.length !== width * height) {
        u.error("DataSet: data array length error:\ndata.length: " + this.data.length + " width: " + this.width + " height: " + this.height);
      }
      return this;
    };

    DataSet.prototype.checkXY = function(x, y) {
      if (!((0 <= x && x <= this.width - 1) && (0 <= y && y <= this.height - 1))) {
        return u.error("x,y out of range: " + x + "," + y);
      }
    };

    DataSet.prototype.nearest = function(x, y) {
      return this.getXY(Math.round(x), Math.round(y));
    };

    DataSet.prototype.bilinear = function(x, y) {
      var dx, dy, f00, f01, f10, f11, i, w, x0, y0, _ref, _ref1, _ref2;
      this.checkXY(x, y);
      x0 = Math.floor(x);
      y0 = Math.floor(y);
      i = this.toIndex(x0, y0);
      w = this.width;
      x = x - x0;
      y = y - y0;
      dx = 1 - x;
      dy = 1 - y;
      f00 = this.data[i];
      f01 = (_ref = this.data[i + w]) != null ? _ref : 0;
      f10 = (_ref1 = this.data[++i]) != null ? _ref1 : 0;
      f11 = (_ref2 = this.data[i + w]) != null ? _ref2 : 0;
      return f00 * dx * dy + f10 * x * dy + f01 * dx * y + f11 * x * y;
    };

    DataSet.prototype.toIndex = function(x, y) {
      return x + y * this.width;
    };

    DataSet.prototype.toXY = function(i) {
      return [i % this.width, Math.floor(i / this.width)];
    };

    DataSet.prototype.getXY = function(x, y) {
      this.checkXY(x, y);
      return this.data[this.toIndex(x, y)];
    };

    DataSet.prototype.setXY = function(x, y, num) {
      this.checkXY(x, y);
      return this.data[this.toIndex(x, y)] = num;
    };

    DataSet.prototype.toString = function(fixed, p) {
      var data, i, s, _i, _ref;
      if (fixed == null) {
        fixed = false;
      }
      if (p == null) {
        p = 2;
      }
      s = "width: " + this.width + " height: " + this.height + " data:";
      data = fixed ? u.aToFixed(this.data, p) : this.data;
      for (i = _i = 0, _ref = this.height; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        s += "\n" + ("" + i + ": " + (data.slice(i * this.width, (i + 1) * this.width)));
      }
      return s;
    };

    DataSet.prototype.toImage = function(gray) {
      var ctx, i, idata, j, norm, num, ta, _i, _len;
      if (gray == null) {
        gray = true;
      }
      ctx = u.createCtx(this.width, this.height);
      idata = ctx.getImageData(0, 0, this.width, this.height);
      ta = idata.data;
      norm = u.normalize(this.data, 0, Math.pow(2, gray ? 8 : 24) - 0.000001);
      for (i = _i = 0, _len = norm.length; _i < _len; i = ++_i) {
        num = norm[i];
        j = 4 * i;
        ta[j + 3] = 255;
        if (gray) {
          ta[j] = ta[j + 1] = ta[j + 2] = Math.floor(num);
        } else {
          ta[j] = num >>> 16;
          ta[j + 1] = (num >> 8) & 0xff;
          ta[j + 2] = num & 0xff;
        }
      }
      ctx.putImageData(idata, 0, 0);
      return ctx.canvas;
    };

    DataSet.prototype.toDrawing = function(gray) {
      var img;
      if (gray == null) {
        gray = true;
      }
      ABM.patches.installDrawing((img = this.toImage(gray)));
      return img;
    };

    DataSet.prototype.setPatchVar = function(name) {
      var ds, p, _i, _len, _ref, _results;
      ds = this.resample(ABM.patches.numX, ABM.patches.numY);
      _ref = ABM.patches;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _results.push(p[name] = ds.data[p.id]);
      }
      return _results;
    };

    DataSet.prototype.resample = function(width, height) {
      var data, downSample, s, x, xScale, xs, y, yScale, ys, _i, _j;
      if (width === this.width && height === this.height) {
        return this;
      }
      data = [];
      xScale = (this.width - 1) / (width - 1);
      yScale = (this.height - 1) / (height - 1);
      downSample = (xScale >= 1) || (yScale >= 1);
      for (y = _i = 0; _i < height; y = _i += 1) {
        for (x = _j = 0; _j < width; x = _j += 1) {
          xs = x * xScale;
          ys = y * yScale;
          s = downSample ? this.nearest(xs, ys) : this.bilinear(xs, ys);
          data.push(s);
        }
      }
      return new DataSet(width, height, data);
    };

    DataSet.prototype.neighborhood = function(x, y, array) {
      var dx, dy, x0, y0, _i, _j;
      if (array == null) {
        array = [];
      }
      array.length = 0;
      for (dy = _i = -1; _i <= 1; dy = ++_i) {
        for (dx = _j = -1; _j <= 1; dx = ++_j) {
          x0 = u.clamp(x + dx, 0, this.width - 1);
          y0 = u.clamp(y + dy, 0, this.height - 1);
          array.push(this.data[this.toIndex(x0, y0)]);
        }
      }
      return array;
    };

    DataSet.prototype.convolve = function(kernel) {
      var array, n, x, y, _i, _j, _ref, _ref1;
      array = [];
      n = [];
      for (y = _i = 0, _ref = this.height; _i < _ref; y = _i += 1) {
        for (x = _j = 0, _ref1 = this.width; _j < _ref1; x = _j += 1) {
          this.neighborhood(x, y, n);
          array.push(u.aSum(u.aPairMul(kernel, n)));
        }
      }
      return new DataSet(this.width, this.height, array);
    };

    DataSet.prototype.subset = function(x, y, width, height) {
      var data, i, j, _i, _j, _ref, _ref1;
      if (x + width > this.width || y + height > this.height) {
        u.error("subSet: params out of range");
      }
      data = [];
      for (j = _i = y, _ref = y + height; _i < _ref; j = _i += 1) {
        for (i = _j = x, _ref1 = x + width; _j < _ref1; i = _j += 1) {
          data.push(this.getXY(i, j));
        }
      }
      return new DataSet(width, height, data);
    };

    return DataSet;

  })();

}).call(this);

/*
//@ sourceMappingURL=data.map
*/
